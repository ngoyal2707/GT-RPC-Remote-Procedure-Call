/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCService_H
#define RPCService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "server_types.h"

namespace RPC {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RPCServiceIf {
 public:
  virtual ~RPCServiceIf() {}
  virtual void getResponse(dataFormat& _return, const std::string& url) = 0;
};

class RPCServiceIfFactory {
 public:
  typedef RPCServiceIf Handler;

  virtual ~RPCServiceIfFactory() {}

  virtual RPCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCServiceIf* /* handler */) = 0;
};

class RPCServiceIfSingletonFactory : virtual public RPCServiceIfFactory {
 public:
  RPCServiceIfSingletonFactory(const boost::shared_ptr<RPCServiceIf>& iface) : iface_(iface) {}
  virtual ~RPCServiceIfSingletonFactory() {}

  virtual RPCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCServiceIf> iface_;
};

class RPCServiceNull : virtual public RPCServiceIf {
 public:
  virtual ~RPCServiceNull() {}
  void getResponse(dataFormat& /* _return */, const std::string& /* url */) {
    return;
  }
};

typedef struct _RPCService_getResponse_args__isset {
  _RPCService_getResponse_args__isset() : url(false) {}
  bool url :1;
} _RPCService_getResponse_args__isset;

class RPCService_getResponse_args {
 public:

  RPCService_getResponse_args(const RPCService_getResponse_args&);
  RPCService_getResponse_args& operator=(const RPCService_getResponse_args&);
  RPCService_getResponse_args() : url() {
  }

  virtual ~RPCService_getResponse_args() throw();
  std::string url;

  _RPCService_getResponse_args__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const RPCService_getResponse_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const RPCService_getResponse_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCService_getResponse_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCService_getResponse_pargs {
 public:


  virtual ~RPCService_getResponse_pargs() throw();
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCService_getResponse_result__isset {
  _RPCService_getResponse_result__isset() : success(false) {}
  bool success :1;
} _RPCService_getResponse_result__isset;

class RPCService_getResponse_result {
 public:

  RPCService_getResponse_result(const RPCService_getResponse_result&);
  RPCService_getResponse_result& operator=(const RPCService_getResponse_result&);
  RPCService_getResponse_result() {
  }

  virtual ~RPCService_getResponse_result() throw();
  dataFormat success;

  _RPCService_getResponse_result__isset __isset;

  void __set_success(const dataFormat& val);

  bool operator == (const RPCService_getResponse_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCService_getResponse_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCService_getResponse_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCService_getResponse_presult__isset {
  _RPCService_getResponse_presult__isset() : success(false) {}
  bool success :1;
} _RPCService_getResponse_presult__isset;

class RPCService_getResponse_presult {
 public:


  virtual ~RPCService_getResponse_presult() throw();
  dataFormat* success;

  _RPCService_getResponse_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RPCServiceClient : virtual public RPCServiceIf {
 public:
  RPCServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getResponse(dataFormat& _return, const std::string& url);
  void send_getResponse(const std::string& url);
  void recv_getResponse(dataFormat& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getResponse(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCServiceProcessor(boost::shared_ptr<RPCServiceIf> iface) :
    iface_(iface) {
    processMap_["getResponse"] = &RPCServiceProcessor::process_getResponse;
  }

  virtual ~RPCServiceProcessor() {}
};

class RPCServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCServiceProcessorFactory(const ::boost::shared_ptr< RPCServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCServiceIfFactory > handlerFactory_;
};

class RPCServiceMultiface : virtual public RPCServiceIf {
 public:
  RPCServiceMultiface(std::vector<boost::shared_ptr<RPCServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCServiceIf> > ifaces_;
  RPCServiceMultiface() {}
  void add(boost::shared_ptr<RPCServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getResponse(dataFormat& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getResponse(_return, url);
    }
    ifaces_[i]->getResponse(_return, url);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RPCServiceConcurrentClient : virtual public RPCServiceIf {
 public:
  RPCServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getResponse(dataFormat& _return, const std::string& url);
  int32_t send_getResponse(const std::string& url);
  void recv_getResponse(dataFormat& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
